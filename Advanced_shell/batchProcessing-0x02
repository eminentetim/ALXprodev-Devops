#!/bin/bash

# List of Pokémon to fetch
POKEMON_LIST=("Bulbasaur" "Ivysaur" "Venusaur" "Charmander" "Charmeleon")

# Base URL for the Pokémon API
API_BASE_URL="https://pokeapi.co/api/v2/pokemon"

# Delay between requests (in seconds)
DELAY=2

# Maximum number of retries for failed requests
MAX_RETRIES=3

# Error log file
ERROR_LOG="error_log.txt"

# Clear the error log file
> "$ERROR_LOG"

# Function to fetch Pokémon data
fetch_pokemon_data() {
    local pokemon="$1"
    local pokemon_lower=$(echo "$pokemon" | awk '{print tolower($0)}')
    local output_file="${pokemon_lower}.json"
    local attempt=0
    local success=0

    # Retry loop
    while [ $attempt -lt $MAX_RETRIES ]; do
        echo "Attempting to fetch data for $pokemon (Attempt $((attempt + 1)))..."
        response=$(curl -s -w "%{http_code}" -o "$output_file" "$API_BASE_URL/$pokemon_lower")
        http_code=$(tail -n1 <<< "$response")

        if [ "$http_code" -eq 200 ]; then
            echo "Successfully fetched data for $pokemon. Saved to $output_file."
            success=1
            break
        else
            echo "Failed to fetch data for $pokemon (HTTP $http_code). Retrying..."
            attempt=$((attempt + 1))
            sleep $DELAY
        fi
    done

    # Log error if all retries fail
    if [ $success -ne 1 ]; then
        echo "Error: Unable to fetch data for $pokemon after $MAX_RETRIES attempts." >> "$ERROR_LOG"
        echo "Error logged for $pokemon."
        rm -f "$output_file" # Remove incomplete file
    fi
}

# Loop through Pokémon list and fetch data
for pokemon in "${POKEMON_LIST[@]}"; do
    fetch_pokemon_data "$pokemon"
    echo "Waiting for $DELAY seconds before the next request..."
    sleep $DELAY
done

echo "Data retrieval process complete."
if [ -s "$ERROR_LOG" ]; then
    echo "Some errors occurred. Check $ERROR_LOG for details."
else
    echo "All Pokémon data fetched successfully!"
fi

